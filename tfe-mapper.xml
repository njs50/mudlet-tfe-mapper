<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>room number displayed</name>
			<script>local newRoomId = tonumber(matches[2])
local newAreaId = tfe.getAreaIdFromRoomId(matches[2]);

tfe.roomInfo.roomId = tostring(newRoomId)
tfe.roomInfo.areaId = tostring(newAreaId)

-- display(tfe.roomInfo)

if (tfe.roomInfo.roomId ~= tfe.previousRoomInfo.roomId) then
  
  raiseEvent(tfe.events.ROOM_CHANGED, tfe.roomInfo)
  
end

centerview(tfe.roomInfo.roomId)

</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^Room #(\d+)$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>room info 2/3</name>
			<script>local roomInfo = {}

-- showMultimatches()
-- display(multimatches)
roomInfo.roomName = multimatches[1][2]

roomInfo.lighting = multimatches[3][2]
roomInfo.time = multimatches[3][3]
roomInfo.terrain = multimatches[3][4]


roomInfo.exits = {}
multimatches[4][2]:gsub(".", function(exit)
  table.insert(roomInfo.exits, tfe.consts.exitmap[exit])
end)


roomInfo.moon = multimatches[4][3]
roomInfo.roomSize = multimatches[4][4]

roomInfo.weather = string.split(multimatches[5][2], '; ')

send('queue typo &amp; scan')

-- if we had previously identified a room update previous room
if (tfe.roomInfo.roomId) then
  tfe.previousRoomInfo = tfe.roomInfo
end

tfe.roomInfo = roomInfo


</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>5</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^\s+(.+?)\s+$</string>
				<string>^\+=-+=\+$</string>
				<string>^\|\s+Lighting:\s+(.+?)\s+Time:\s+(.+?)\s+Terrain:\s+(.+?)\s+\|$</string>
				<string>^\|\s+Exits:\s+(.+?)\s+Moon:\s+(.+?)\s+Room Size:\s+(.+?)\s+\|$</string>
				<string>^\|\s+Weather:\s+(.+?)\s+\|$</string>
				<string>^\+=-+=\+$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>room info 1</name>
			<script>-- showMultimatches()
local roomInfo = {}

roomInfo.roomName  = multimatches[1][2]
roomInfo.exits = string.split(rex.gsub(multimatches[2][2], [[\s*#\d+]], ''),  " ")

send('queue typo &amp; scan')

-- if we had previously identified a room update previous room
if (tfe.roomInfo.roomId) then
  tfe.previousRoomInfo = tfe.roomInfo 
end

tfe.roomInfo = roomInfo


</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>1</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^([^[].*)$</string>
				<string>^\[Exits: (.*)]$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>repeat stuff jammed in prompt</name>
			<script>if (matches[3]) then
	local prompt = matches[2]
	local stuff = matches[3]
  -- echo('\n^^ PROMPT FAIL: [' .. stuff .. ']\n')
  feedTriggers(prompt .. '\n')
  feedTriggers(stuff .. '\n')
end
</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^(&lt;[^&gt;]*&gt;)(.+)$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>movement helpers</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>no exit to the x</name>
				<script>
local exitDir = matches[2]

cecho('\n&lt;green&gt;MOVE: &lt;white&gt;failed to go ' .. exitDir .. '... ' .. tfe.roomInfo.roomId .. '\n' )

local exits = {
  east = {
  	[1022]  = 'move bush &amp; east',
		[28102] = 'move moss &amp; east',
		[28095] = 'move bush &amp; east',
		[48175] = 'move landslide &amp; east',
		[66014] = 'dig ice',
		[75000] = 'move rock',
		[21135] = 'enter crack &amp; get chain &amp; queue loop chain &amp; queue drop chain',
		[65503] = 'enter crev',
		[91662] = 'open crack',
		[37161] = 'move board &amp; enter hole',
		[23502] = 'enter break',
    [82021] = 'stand &amp; break ice',
    [82012] = 'enter crev',
    [82002] = 'dig drift &amp; scan',
    [4008] = 'enter water',
    [48152] = 'move pile',
	},
	west = {
		[28134] = 'move moss &amp; west',
		[28102] = 'move bush &amp; west',
		[37045] = 'move landslide &amp; west',
		[48180] = 'touch lotus',
		[47761] = 'move bush',
		[32023] = 'pull lever &amp; west',
		[66058] = 'dig ice',
		[35963] = 'move rock',
		[26542] = 'enter crev',
		[65502] = 'enter crack',
		[37055] = 'move board &amp; enter hole',
		[37160] = 'twist knob',
		[48169] = 'lift beam &amp; pull lever',
		[23506] = 'enter break',
    [82024] = 'stand &amp; break ice',
    [82013] = 'enter crev',
    [82003] = 'dig drift &amp; queue scan',
    [48153] = 'move pile',
	},
	north = {
		[44908] = 'enter water',
		[44885] = 'move bush &amp; north',
		[44904] = 'jump north',
		[27040] = 'jump north',
		[27274] = 'move boulder &amp; scan',
		[34500] = 'pull torch &amp; north',
		[25004] = 'enter crev',
		[2505]  = 'twist torch &amp; north',
		[37037] = 'move branch &amp; enter veget',
		[91679] = 'enter veget',
		[74005] = 'move tree &amp; north',
		[30000] = 'dig mound',
		[66011] = 'spread ashes',
		[66063] = 'move tapes',
		[53000] = 'yell khiren',
		[44765] = 'pull slab',
		[30877] = 'enter crevice',
		[51064] = 'move drift',
		[39348] = 'move bush',
		[75013] = 'jump north',
		[23091] = 'cross stream',
		[65504] = 'enter crack',
		[47000] = 'move bush',
    [82035] = 'stand &amp; break ice',
    [34518] = 'dig drift &amp; scan',
    [27255] = 'push circ &amp; push squar &amp; push diam &amp; push triang',
    [2037] = 'enter hole',
    [48152] = 'open beam',
    [48165] = 'open slab',
    [566] = 'pull lever',
	},
	south = {
		[44909] = 'enter water',
		[44886] = 'move bush &amp; south',
		[44905] = 'jump south',
		[34501] = 'push stone &amp; south',
		[25012] = 'enter crev',
		[2517]  = 'push wall &amp; south',
		[91683] = 'enter veget',
		[91682] = 'move branch &amp; enter veget',
		[74004] = 'move tree &amp; south',
		[74061] = 'cut veg',
		[47777] = 'dig drift',
		[47767] = 'climb down',
		[47773] = 'climb down',
		[47772] = 'climb down',
		[47771] = 'climb down',
		[47770] = 'climb down',
		[47769] = 'climb down',
		[47777] = 'dig drift',
		[47761] = 'move plant',
		[19132] = 'dig mound',
		[34579] = 'ask dwa demon',
		[73500] = 'push stone',
		[37045] = 'move bush',
		[75014] = 'climb south',
		[37546] = 'move moss',
		[51753] = 'cross stream',
		[65505] = 'enter crack',
		[40534] = 'move bush',
    [82036] = 'stand &amp; break ice',
    [82000] = 'dig drift &amp; scan',
    [2039] = 'climb up',
    [2040] = 'climb up',
    [48150] = 'move beam',
    [48149] = 'get pebble',
    [48168] = 'open slab',
    [481] = 'push rock',

	},
	below = {
		[48205] = 'move slab',
		[40251] = 'enter hole',
		[73502] = 'move stone',
		[68051] = 'pull lever',
		[68043] = 'push statue',
		[21326] = 'call essyn',
		[49783] = 'search',
		[39510] = 'pull chain',
		[94274] = 'move log',
		[94264] = 'move brush',
		[20086] = 'move floor',
		[91668] = 'climb bould',
		[31000] = 'climb stone',
    [95768] = 'search plant &amp; enter opening',
    [95750] = 'enter log',
    [30402] = 'move granite',
   
	},
	above = {
		[73606] = 'move stone',
		[68029] = 'throw dart &amp; pull lever',
		[68039] = 'pull lever',
		[68027] = 'call dact &amp; place globe',
		[21325] = 'ask essyn festival',
		[49785] = 'search',
		[94251] = 'move brush',
		[94268] = 'move log',
		[71625] = 'move rock',
		[91667] = 'climb bould',
    [95785] = 'enter fissure',
    [95769] = 'search plant &amp; enter opening',
	},
	that = {
		[33357] = 'move crates',
	}
}


if exits[exitDir] then

	local thisExit = exits[exitDir]

  if (thisExit[tfe.roomInfo.roomId]) then
  	send(thisExit[tfe.roomInfo.roomId])
	else

  	local exit = exitDir
  	if (exit == 'below') then exit = 'down' end
  	if (exit == 'above') then exit = 'up' end

  	send('open ' .. exit .. ' &amp; scan')

  end

end


</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You see no exit to the (.*)\.</string>
					<string>^You see no exit (.*) you\.</string>
					<string>^There is no exit in (that) direction\.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>You can't do that while mounted.</name>
				<script>common.onNextEvent(common.events.ROOM_CHANGED, function ()
	send('mount')
end)
send('dismount')
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You can't do that while mounted.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
			<name>don't time out</name>
			<script>send('\n', false)</script>
			<command></command>
			<packageName></packageName>
			<time>00:01:00.000</time>
		</Timer>
	</TimerPackage>
	<AliasPackage>
		<Alias isActive="yes" isFolder="no">
			<name>tfemap</name>
			<script>local commands = {

  start = function()
    tfe.mapping_start()
  end,
  
  stop = function ()
    tfe.mapping_stop()
  end,
  
  area = function(name)
    setAreaName(tfe.roomInfo.areaId, name)
  end,
  
}

if (commands[matches[2]]) then
  commands[matches[2]](matches[3])
else
  cecho('&lt;red&gt;TFE MAP: &lt;white&gt;unknown command - ' .. matches[2] .. '\n\n')
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^tfemap (\w+)\s?(.*)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>movement command</name>
			<script>-- look for movement commands being sent and spy on the directions
if (tfe.mapping) then
  tfe.lastMoveDirection = tfe.consts.exitmap[matches[2]]
  send(tfe.lastMoveDirection .. matches[3])
  tfe.currentMoveStep = tfe.consts.moveSteps[1]
else
  send(matches[1], false)
end

</script>
			<command></command>
			<packageName></packageName>
			<regex>^(n|e|s|w|u|d)(\s+&amp;.*|\s*)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>go</name>
			<script>local dest = matches[2]

local lookup = {
	hillies = 28018,
	pixies = 44904,
  denab = 28132,
  denabBank = 30389,
	kha = 27004,
	khaBank = 27042,
	med = 107,
	medBank = 144,
	pen = 37013,
	penBank = 37249,
	sos = 30752,
	voal = 20088,
	voalBank = 20027,
	cairn = 26568,
	knight = 21096,
	hollow = 91675,
	blade = 19370,
	wayward = 40585,
  whisper = 28134,
	chi = 25000,
	zaranders = 27500,
	barbs = 66071,
	denab = 28132,
	brith = 63534,
	tg = 17331,
	cycs = 44765,
	stonies = 19164,
	toys = 39008,
	vyans = 28146,
	root = 19376,
	yetis = 94611,
	ettercaps = 70104,
	cairnValley = 57258,
	temple = 21257,
	narak = 36070,
	halflings = 21076,
}

local rnum = lookup[dest] or dest

if (typeof(rnum) == 'string' and roomExists(rnum)) then

	cecho('&lt;green&gt;TFE MAP: &lt;white&gt; rnum #' .. tostring(rnum) .. '\n')
 
  local endCmd = matches[3]

	tfe.gotoRoom(rnum, function () 
		if (endCmd) then
			expandAlias(endCmd)
		end
	end)
	
else
	cecho('\n&lt;red&gt;TFE MAP:&lt;white&gt; Invalid speed walk location\n')
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^go (\S+)\s?&amp;?\s?(.*)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>^(stop|pause|resume)$</name>
			<script>
local commands = {
  stop = tfe.speedwalkStop,
  pause = tfe.speedwalkPause,
  resume = tfe.speedwalkResume,
}

commands[matches[2]]()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(stop|pause|resume)$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<Script isActive="yes" isFolder="no">
			<name>njs50 common</name>
			<packageName></packageName>
			<script>njs50 = njs50 or {}

njs50.onNextEvent = function (evt, callback)

	if not evt then
		cecho('\n\n&lt;red&gt;Next Event: &lt;white&gt;no event defined!!!\n\n')
		error()
	end


	local handlerId = nil
	local cb2 = callback

	local cb = function (evt, args)
		killAnonymousEventHandler(handlerId)
		cb2(evt, args)
	end

	handlerId = registerAnonymousEventHandler(evt, cb, true)

	-- cecho('\n&lt;green&gt;registering self destruct event: ' .. evt .. ' : ' .. tostring(handlerId) .. '\n')

	return function ()
		-- cecho('\n&lt;orange&gt;destructing handler: ' .. evt .. ' : ' .. tostring(handlerId) .. '\n')
		killAnonymousEventHandler(handlerId)
	end

end</script>
			<eventHandlerList />
		</Script>
		<Script isActive="yes" isFolder="no">
			<name>tfe mapper</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
mudlet = mudlet or {};
mudlet.mapper_script = true



tfe = tfe or {}

tfe.events = {
  ROOM_CHANGED = 'tfe mapper: room found',
  WALK_COMPLETE = 'tfe mapper: speedwalk complete',
}

tfe.consts = tfe.consts or {}

tfe.consts.exitmap = {
    n = 'north',    e = 'east',
    w = 'west',     s = 'south',
    u = 'up',       d = 'down',
	  N = 'north',    E = 'east',
    W = 'west',     S = 'south',
    U = 'up',       D = 'down',
}


tfe.consts.short = {}
for k,v in pairs(tfe.consts.exitmap) do
    tfe.consts.short[v] = k
end

-- for some reason the speed walker doesn't use shorts for up/down
tfe.consts.exitmap['up'] = 'up'
tfe.consts.exitmap['down'] = 'down'

tfe.consts.stubmap = {
    north = 1,      east = 4,
    west = 5,       south = 6,
    up = 9,         down = 10,          ["in"] = 11,        out = 12,
    [1] = "north",  [4] = "east",
    [5] = "west",   [6] = "south",
    [9] = "up",     [10] = "down",
}

tfe.consts.coordmap = {
    [1] = {0,1,0},      [4] = {1,0,0},
    [5] = {-1,0,0},     [6] = {0,-1,0},
    [9] = {0,0,1},      [10] = {0,0,-1},
}

tfe.consts.reverse_dirs = {
    north = "south", south = "north",
		west = "east", east = "west",
		up = "down", down = "up",
}



tfe.consts.moveSteps = {
  'command issued',
  'room changed',
}


local shortSpeedWalkTimerId

tfe.startShortSpeedWalkTimer = function ()

	-- clear any existing timer
	tfe.clearShortSpeedWalkTimer()


	-- give us 5 seconds to move...
	shortSpeedWalkTimerId = tempTimer(5, function ()
		shortSpeedWalkTimerId = nil
		cecho('\n&lt;yellow&gt;TFE MAP: &lt;white&gt;5 seconds without move!!! - updating path...\n')
		tfe.rerouteSpeedwalk()
	end)


end

tfe.clearShortSpeedWalkTimer = function()
	if (shortSpeedWalkTimerId) then
		killTimer(shortSpeedWalkTimerId)
	end
	shortSpeedWalkTimerId = nil
end

tfe.speedwalkPause = function ()
  if (tfe.speedwalking) then
    tfe.speedwalking.paused = true
    cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;speedwalking paused\n')
  else
   cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;not currently speedwalking\n')
  end
end

tfe.speedwalkResume = function ()
  if (tfe.speedwalking) then
    tfe.speedwalking.paused = nil
    cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;speedwalking resumed\n')
    tfe.speedWalkStep()
  else
     cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;not currently speedwalking\n')
  end
end

tfe.speedwalkStop = function ()
 
 if (tfe.speedwalking) then
    tfe.clearShortSpeedWalkTimer()
    -- clear any room change watcher if it exists
    if (tfe.speedwalking.roomChangeWatcher) then
      tfe.speedwalking.roomChangeWatcher()
      tfe.speedwalking.roomChangeWatcher = nil
    end
    
    tfe.speedwalking = nil
    cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;speedwalking stopped\n')
  else
     cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;not currently speedwalking\n')
  end
  
end


tfe.speedWalkStep = function ()
  
  tfe.clearShortSpeedWalkTimer()
  -- clear any room change watcher if it exists
  if (tfe.speedwalking.roomChangeWatcher) then
    tfe.speedwalking.roomChangeWatcher()
    tfe.speedwalking.roomChangeWatcher = nil
  end

  if (tfe.speedwalking) then
    
    if (tostring(tfe.roomInfo.roomId) ~= tfe.speedwalking.path[tfe.speedwalking.pathPosition]) then
      
      cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;we are off the designated path, recalculating in 5 seconds\n')
      tempTimer(5, function()
        tfe.rerouteSpeedwalk()
      end)
      
    else
    
      
      if (tostring(tfe.roomInfo.roomId) == tfe.speedwalking.destination) then
        
        -- we made it to the end. call the callback if it exists
        cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;at destination\n')
        if (tfe.speedwalking.options.callback) then
          tfe.speedwalking.options.callback()
        end
        
        tfe.speedwalking = nil
        raiseEvent(tfe.events.WALK_COMPLETE)
      
      else
      
        -- we are where we should be. send a move etc
        
        if (not tfe.speedwalking.paused) then
          -- setup a single event watcher for a room change
          tfe.speedwalking.roomChangeWatcher = njs50.onNextEvent(tfe.events.ROOM_CHANGED, tfe.speedWalkStep)
          
          tfe.startShortSpeedWalkTimer()
          send( tfe.consts.exitmap[ tfe.speedwalking.directions[tfe.speedwalking.pathPosition] ])    
          tfe.speedwalking.pathPosition = tfe.speedwalking.pathPosition + 1
        else
          cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;speedwalking halted\n')
        end
      
      
      end
      
      
    end
    
    
  else
    cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;unable to update path., destination not in map\n')
  end

end



tfe.rerouteSpeedwalk = function ()
  cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;rerouting speedwalk\n')
  if (tfe.speedwalking.roomChangeWatcher) then
    tfe.speedwalking.roomChangeWatcher()
    tfe.speedwalking.roomChangeWatcher = nil
  end
  tfe.gotoRoom(tfe.speedwalking.destination, tfe.speedwalking.callback)
end


tfe.gotoRoom = function (roomId, options)

  roomId = tostring(roomId)

  cecho('&lt;green&gt;pathing: &lt;white&gt;' .. tostring(tfe.roomInfo.roomId) .. ' to ' .. tostring(roomId))
	if (roomExists(tfe.roomInfo.roomId)) then
  	if (roomExists(tfe.roomInfo.roomId)) then
    
      getPath(tfe.roomInfo.roomId, roomId)
    
      tfe.speedwalking = {
        destination = roomId,
        path = speedWalkPath,
        directions = speedWalkDir,
        pathPosition = 1,
        options = options or {}
      }
    
      table.insert(tfe.speedwalking.path, 1, tostring(tfe.roomInfo.roomId))

      tfe.speedWalkStep()
      
     else
     
  		cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;unable to update path., destination not in map\n')
  	end
  	
	else
		cecho('\n&lt;red&gt;TFE MAP: &lt;white&gt;unable to update path., current room not in map\n')
	end

end


-- to allow clicking the map
function doSpeedWalk()
 	tfe.gotoRoom(speedWalkPath[#speedWalkPath])
end

tfe.mapping_start = function ()
  cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;started recording movements (use n|e|s|w|u|d to move)\n')
  tfe.mapping = true
end


tfe.mapping_stop = function ()
  cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;stopped recording movements\n')
  tfe.mapping = false
end

tfe.getAreaIdFromRoomId = function(roomId)

  
  local tfeArea = tfe.getDefaultAreaByRoomId(tonumber(roomId))
  
  local tfeID = tfeArea.idStart
  
	local areas = getAreaTable()
	 for area, id in pairs(areas) do
    -- deleteArea(id) -- clear all areas in map
    if getAreaUserData(id, "tfe-zone-id") == tostring(tfeID) then
      return id
    end
  end
  
  -- id doesn't exist yet, so we need to create it
  local areaId = addAreaName(tfeArea.name)
  	
  -- in case this area name already exists. bleh
  local inc = 1
	while (not areaId) do
		inc = inc + 1
		areaId = addAreaName(tfeArea.name .. ' - ' .. tostring(inc));
	end
  setAreaUserData(areaId, "tfe-zone-id", tfeID)
  
  cecho('\n&lt;green&gt;TFE MAP: &lt;white&gt;created new area... ' .. tostring(areaId) .. ' : ' .. tfeArea.name .. '\n')
  
  
  return areaId


end


tfe.addCurrentRoom = function ()

  -- no need to add an existing room
  if roomExists(tfe.roomInfo.roomId) then
		centerview(tfe.roomInfo.roomId)
  else

		local x = 0; local y = 0; local z = 0;

    -- calculate new x/y/z
  	if tfe.previousRoomInfo.roomId and roomExists(tfe.previousRoomInfo.roomId) then
  		-- echo('\n HAD PREVIOUS ROOM!!! - \n' .. tfe.previousRoomInfo.roomId)
  		x,y,z = getRoomCoordinates(tfe.previousRoomInfo.roomId);
  		-- echo('\nold location is: ' .. tostring(x) .. ', ' .. tostring(y) .. ', ' .. tostring(z) .. ')\n')
  		local dx, dy, dz = unpack(tfe.consts.coordmap[tfe.consts.stubmap[tfe.lastMoveDirection]])
  		x = x + dx
  		y = y + dy
  		z = z + dz
  		-- echo('new location is: (' .. tostring(dx) .. ', ' .. tostring(dy) .. ', ' .. tostring(dz) .. ')')
  	end


  	-- echo('moved direction: ' .. map.consts.short[map.lastMoveDirection] )

		echo('\nmap area id is: ' .. tfe.roomInfo.areaId)

    addRoom(tfe.roomInfo.roomId)

		setRoomArea(tfe.roomInfo.roomId, tfe.roomInfo.areaId);

		-- echo('\nlocation is: (' .. tostring(x) .. ', ' .. tostring(y) .. ', ' .. tostring(z) .. ')\n')

  	-- echo('\nadding room... ' .. tfe.roomInfo.roomId)

  	setRoomName(tfe.roomInfo.roomId, tfe.roomInfo.roomName)

  	setRoomCoordinates(tfe.roomInfo.roomId, x, y, z)

		-- add room exit stubs
		for i, exit in ipairs(tfe.roomInfo.exits) do
			if(tfe.consts.short[exit]) then
      	setExitStub(tfe.roomInfo.roomId, tfe.consts.short[exit], true)
			end
    end

  	centerview(tfe.roomInfo.roomId)

  end

	if (tfe.previousRoomInfo.roomId ~= tfe.roomInfo.roomId) then
		cecho('\n&lt;green&gt;MAPPER: &lt;white&gt;joining ' .. tostring(tfe.roomInfo.roomId) ..' to room: ' .. tostring(tfe.previousRoomInfo.roomId))
		setExit(tfe.previousRoomInfo.roomId, tfe.roomInfo.roomId, tfe.consts.stubmap[tfe.lastMoveDirection])
		setExit(tfe.roomInfo.roomId, tfe.previousRoomInfo.roomId, tfe.consts.stubmap[tfe.consts.reverse_dirs[tfe.lastMoveDirection]])
	end



end


tfe.initMap = function ()

  -- expandAlias('map update')
  
  -- send("prompt ?p' -- MORE -- '&lt;%f?f|@R%hhp@n @G%ee@n @B?m'[%mmv]'!m'%vmv'@n %gwm %xxp?l' %llhp' %d?b' %c'&gt;")

end

local pairsByKeys = function(t, f)
  local a = {}
  for n in pairs(t) do table.insert(a, n) end
  table.sort(a, f)
  local i = 0      -- iterator variable
  local iter = function ()   -- iterator function
    i = i + 1
    if a[i] == nil then return nil
    else return a[i], t[a[i]]
    end
  end
  return iter
end


tfe.consts.zoneMap = {
  [25500] = "Kssk Swamp",
  [57000] = "Theatre in the Hills",
  [75000] = "Fire Newts",
  [42250] = "Old Forest/Mt Road",
  [71000] = "Gnomish Picnic",
  [53000] = "Great Snowy Plain",
  [67000] = "Path of Destiny",
  [1000] = "Dark Forest II",
  [38250] = "Renegade Gnome Lair",
  [75750] = "Tree Lizard Warren",
  [36250] = "Pennan-Narak Corridor",
  [47000] = "Chiiron Bandits",
  [45000] = "Domed Chamber",
  [76500] = "Orlumber Road",
  [31250] = "Warlock Coven Mines",
  [72500] = "Forgotten Tombs",
  [68500] = "Honeypot Ants",
  [51750] = "Lesser Efreets",
  [77250] = "Southern Trade Road",
  [37000] = "Pennan/Rua Valley",
  [27250] = "Orc Raider Camp",
  [60500] = "Gypsy Island",
  [26250] = "Sea Cave/Skeleton Ship",
  [33000] = "North of Kha-Da",
  [78000] = "Goblin Siege Camp",
  [8000] = "Kha-Dehl",
  [56500] = "Glory Hole Mine",
  [74000] = "Shadowy Forest",
  [54500] = "Western Plains",
  [41001] = "Add. Pennan Shops",
  [52500] = "Forgotten Isles",
  [52253] = "BAD AREA **DONOT USE**",
  [50500] = "Black Temple of Morkith",
  [74750] = "Smuggler's Grotto",
  [35750] = "Great Desert Road",
  [33750] = "Death",
  [32000] = "Hill Giants Cave",
  [44500] = "The Greenhouse",
  [75500] = "Sandcrab Tunnels",
  [31000] = "K'ssk Swamp",
  [42500] = "Naraki Desert",
  [71500] = "Hark's Finger",
  [13500] = "Medienne Sewers",
  [30000] = "Darkhaven",
  [40500] = "Around Chiiron",
  [2500] = "Natural Caves",
  [51250] = "The Black Wastes",
  [76250] = "Stag Beetle Lair",
  [12500] = "Monestary",
  [28000] = "Great North Road",
  [36500] = "Ship Wreck",
  [12000] = "Kobold Caves",
  [27000] = "Kha-da",
  [47250] = "Clan Strongholds",
  [26000] = "Chiiron Cemetery",
  [45250] = "Rat Infested Dump",
  [77000] = "Minor Djinns",
  [25000] = "Chiiron Waterfall",
  [56000] = "Sea Sprite Colony",
  [6285] = "Slime Caves",
  [24000] = "Chiiron Brush",
  [54000] = "Enchanted Garden",
  [69000] = "Crabman Catacomb",
  [78750] = "Blank",
  [52000] = "The Rift",
  [77750] = "Shadybrook Wilds",
  [49000] = "Mangits",
  [35000] = "Troll Warrens",
  [22000] = "Beach at Sea of Stars",
  [36000] = "Narak",
  [73001] = "Big Beaver Damn",
  [9000] = "Graveyard of Castle Lag",
  [21000] = "Northern Sea Trail",
  [35250] = "Darken Wood",
  [55000] = "Serpentlair",
  [48500] = "Desert Canyon",
  [8500] = "Dark Wharf(unfinished)",
  [20000] = "Voaleth",
  [33250] = "Castle Lag",
  [1750] = "Medienne Graveyard",
  [51000] = "Clan Houses",
  [43500] = "Fire Ant Caves",
  [19000] = "The Vaasa",
  [44000] = "Desert Ogre Caves",
  [74500] = "Sea of Stars",
  [37250] = "Naraki Catacombs",
  [59000] = "The Dal-Entil Village",
  [30750] = "Sos-kul",
  [42000] = "Bitter Pools",
  [70500] = "Mist-filled Marsh",
  [34250] = "Wyrm Lair",
  [67500] = "Tireth's Swamp",
  [53250] = "Magus Towers",
  [65500] = "Eerie Caverns",
  [71600] = "Voaleth Tunnel",
  [40250] = "Rabbit Warren",
  [52750] = "Krysanth Outpost",
  [34750] = "Kerog",
  [63500] = "Brithbarad",
  [75250] = "Wererat Temple",
  [50750] = "White Centaur Village",
  [64000] = "Lower Planes",
  [27750] = "Bugbear lair",
  [61500] = "Forest of the Kings",
  [33500] = "Orlumber",
  [49750] = "Vyan Tombs",
  [60000] = "Grotington",
  [36750] = "Denai",
  [46750] = "Tomb of Harand-Da",
  [4500] = "Underworld/Vyan",
  [65000] = "Talis's Maze",
  [43250] = "Mts.-Blk Hills Rd",
  [40000] = "Dark Citadel",
  [57500] = "Temple of Ri'lahl",
  [76000] = "Fungal Caverns",
  [62000] = "Tomb of the Elven Lord",
  [66000] = "Barbarian Camp",
  [62500] = "Blank",
  [55500] = "Nordun's Chambers",
  [72000] = "Lost City of Shando",
  [64500] = "Tower of the Black Order",
  [50250] = "Voaleth Palace",
  [50000] = "Quiet Elf Village",
  [40750] = "Cardinal Magics Tower",
  [68000] = "Sjerdil's Tower",
  [49250] = "Troglodytes",
  [23001] = "Dark Forest",
  [66500] = "The Great Icalah Tree",
  [51500] = "Ethereal Tower of White",
  [76750] = "Shadybrook",
  [48250] = "The Great Pyramid",
  [48000] = "Naraki Desert",
  [47750] = "Southern Cairn",
  [49500] = "Ruins of Ka-Sith",
  [39753] = "??",
  [41750] = "Ruined Mansion",
  [46500] = "Abandoned Village",
  [45750] = "Dragonspire Glacier",
  [101] = "Town of Medienne",
  [46000] = "Barren Brush",
  [59500] = "Deep Caverns",
  [44750] = "Pixie Forest",
  [44250] = "Giant Bumble Bees",
  [43750] = "Cliff of Eagles",
  [77500] = "Shadowy castle",
  [42750] = "Naraki Desert II",
  [38000] = "Isle of the Mist",
  [31500] = "Renegade Dwarf Warrens",
  [612] = "Anthill",
  [73500] = "Cyclops Caverns",
  [3] = "TFE Office Complex",
  [38750] = "Dwarven keep",
  [30500] = "Cairn Mountain",
  [41500] = "The Island at Cove Ranak",
  [69500] = "Cavernous Bestiary",
  [38500] = "Talonwood",
  [39250] = "Hills of Pennan",
  [39000] = "Black Hills",
  [39500] = "Decrepit House",
  [58500] = "The Dragon Hatchery",
  [300] = "Medienne Forest",
  [35500] = "Crypt of Medienne",
  [37500] = "Caverns of Voaleth",
  [74250] = "Orc Pirate Shantytown",
  [901] = "Chiiron",
  [34500] = "Dragonspire Mountains",
  [27500] = "Zarander's Tower",
  [61000] = "Desert Scarab Lair",
  [34000] = "Arena",
  [41250] = "Ruined Manor",
  [63000] = "The House of Jhessail",
  [26500] = "Vertical Passage",
  [46250] = "Underworld - Caves",
  [30263] = "Denab-Knur",
  [45501] = "Iguana Lair",
  [3500] = "Castle Lag II",
  [5000] = 'Clan Strongholds',
}

tfe.getDefaultAreaByRoomId = function (roomId)
  local lastArea
  for k, v in pairsByKeys(tfe.consts.zoneMap) do
    if (k &gt; roomId) then
      -- display(k, v)
      break;
    end
    lastArea = { name= v, idStart = k }
  end
  
  if (roomId - lastArea.idStart &gt; 1000) then 
    return { name = 'unknown area', idStart = math.floor(roomId/1000)*1000 }
  end
  
  return lastArea
end



 </script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
